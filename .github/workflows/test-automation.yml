name: 自动化测试流水线

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # 每天凌晨2点运行
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_suite:
        description: '选择测试套件'
        required: true
        default: 'smoke'
        type: choice
        options:
        - smoke
        - regression
        - all
      browser:
        description: '选择浏览器'
        required: true
        default: 'chrome'
        type: choice
        options:
        - chrome
        - firefox
        - edge

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
        browser: [chrome, firefox]
      fail-fast: false

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: 安装系统依赖
      run: |
        sudo apt-get update
        sudo apt-get install -y wget gnupg unzip

    - name: 安装Chrome浏览器
      if: matrix.browser == 'chrome'
      run: |
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable

    - name: 安装Firefox浏览器
      if: matrix.browser == 'firefox'
      run: |
        sudo apt-get install -y firefox

    - name: 缓存Python依赖
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: 安装Python依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: 创建报告目录
      run: |
        mkdir -p reports/allure-results
        mkdir -p reports/html
        mkdir -p reports/screenshots
        mkdir -p reports/logs

    - name: 运行冒烟测试
      if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.test_suite == 'smoke')
      run: |
        pytest -m smoke \
          --browser=${{ matrix.browser }} \
          --headless \
          --alluredir=reports/allure-results \
          --html=reports/html/smoke_report.html \
          --self-contained-html \
          -v

    - name: 运行回归测试
      if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.test_suite == 'regression')
      run: |
        pytest -m regression \
          --browser=${{ matrix.browser }} \
          --headless \
          --alluredir=reports/allure-results \
          --html=reports/html/regression_report.html \
          --self-contained-html \
          -v

    - name: 运行所有测试
      if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.event.inputs.test_suite == 'all')
      run: |
        pytest \
          --browser=${{ matrix.browser }} \
          --headless \
          --alluredir=reports/allure-results \
          --html=reports/html/full_report.html \
          --self-contained-html \
          --maxfail=5 \
          -v

    - name: 生成Allure报告
      if: always()
      run: |
        # 安装Allure
        wget -q https://github.com/allure-framework/allure2/releases/download/2.24.0/allure-2.24.0.tgz
        tar -xzf allure-2.24.0.tgz
        sudo mv allure-2.24.0 /opt/allure
        sudo ln -s /opt/allure/bin/allure /usr/bin/allure

        # 生成报告
        allure generate reports/allure-results -o reports/allure-reports --clean

    - name: 上传测试报告
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-reports-${{ matrix.browser }}
        path: |
          reports/
        retention-days: 30

    - name: 上传截图
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: failure-screenshots-${{ matrix.browser }}
        path: reports/screenshots/
        retention-days: 7

    - name: 发布Allure报告到GitHub Pages
      if: always() && matrix.browser == 'chrome' && github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: reports/allure-reports
        destination_dir: allure-reports

    - name: 测试结果通知
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#testing'
        text: |
          测试执行完成！
          分支: ${{ github.ref }}
          浏览器: ${{ matrix.browser }}
          状态: ${{ job.status }}
          报告: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/allure-reports/
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  performance-test:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'schedule'

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: 运行性能测试
      run: |
        pytest -m slow \
          --browser=chrome \
          --headless \
          --alluredir=reports/performance-results \
          -v

    - name: 上传性能报告
      uses: actions/upload-artifact@v3
      with:
        name: performance-reports
        path: reports/performance-results/

  security-test:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 运行安全扫描
      run: |
        # 这里可以添加安全测试工具，如OWASP ZAP等
        echo "运行安全扫描..."
        # docker run -v $(pwd):/zap/wrk/:rw -t owasp/zap2docker-stable zap-baseline.py \
        #   -t https://automationexercise.com \
        #   -g gen.conf \
        #   -r testreport.html

  cleanup:
    runs-on: ubuntu-latest
    needs: [test, performance-test, security-test]
    if: always()

    steps:
    - name: 清理旧的测试报告
      run: |
        echo "清理完成"
        # 这里可以添加清理逻辑
